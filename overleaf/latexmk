#!/usr/bin/python3

import sys
import os
import shutil
import tempfile
import subprocess
import logging


LOGFILE = "/tmp/latexmkwrapper.log"
DEBUG = True
logging.basicConfig(
    filename=LOGFILE,
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)

def main(args):
    logger.info("-----------------------------------------------------------")

    if DEBUG:
        logger.debug("Original command: " + " ".join(args))

    pwd = os.getcwd()

    # check if auxdir and outdir is set
    if not any(arg.startswith("-auxdir=" + pwd) for arg in args):
        logger.error("-auxdir is missing")
        sys.exit(1)

    if not any(arg.startswith("-outdir=" + pwd) for arg in args):
        logger.error("-outdir is missing")
        sys.exit(1)

    with tempfile.TemporaryDirectory() as tmpdirname:
        # tmp project files
        shutil.copytree(pwd, tmpdirname, dirs_exist_ok=True)

        # set new dir to command
        custom_args = []
        for arg in args:
            custom_args.append(arg.replace(pwd, tmpdirname)) 

        custom_args[0] = "latexmk"

        # TODO: sanatize paths --> escaping through filenames
        apptainer_command = [
            "apptainer", "exec",
            "--cleanenv",
            "--no-mount", "dev,hosts,sys,tmp",
            "--no-home",
#            "--contain",
            "--bind", f"{tmpdirname}:{tmpdirname}",
            "/apptainer/latexmk-isolated.sif"
        ] + custom_args

        if DEBUG:
            logger.debug("Apptainer command: " + " ".join(apptainer_command))

        try:
            result = subprocess.run(apptainer_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        except Exception as e:
            logger.error(f"Something went wrong on running {apptainer_command}: {e}")

        if DEBUG:
            logger.debug(f"{result.stdout}")
        
        if result and result.returncode != 0:
            logger.error(f"{result.stderr}")
            logger.error(f"{result.returncode}")

        shutil.copytree(tmpdirname, pwd, dirs_exist_ok=True)
        sys.exit(0)


if __name__ == "__main__":
    main(sys.argv)