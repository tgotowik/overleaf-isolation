#!/usr/bin/python3

import sys
import os
import subprocess
import logging
import re


LOGFILE = "/tmp/latexmkwrapper.log"
DEBUG = True
FILE_REGEX = "[a-zA-Z0-9\ _-]+\.tex"
COMPILER = ["-pdf", "-pdfdvi", "-lualatex", "-xelatex"]

logging.basicConfig(
    filename=LOGFILE,
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)


def main(args):
    if DEBUG:
        logger.debug("Original command: " + " ".join(args))

    pwd = os.getcwd()

    compiler = ""
    auxdir = ""
    outdir = ""
    infile = ""

    # if need to customize arguments
    custom_args = []
    for arg in args:
        custom_args.append(arg) 
        if arg.startswith("-auxdir="):
            auxdir = arg[len("-auxdir="):]
        elif arg.startswith("-outdir"):
            outdir = arg[len("-outdir="):]
        elif arg in COMPILER:
            compiler = arg[len("-"):]
        elif arg == sys.argv[-1]:
            infile = arg

    custom_args[0] = "latexmk"
    
    # sanitize filename
    file_path = custom_args[-1]
    filename = os.path.basename(file_path)

    # if not valid filename
    if not re.match(FILE_REGEX, filename):
        logger.error(f"Unsecure filename: {filename}")
        with open(auxdir + "/output.log", "a") as f:
            f.write("Error: Filename not supported. Please only use letters, hyphens, underscore and spaces before the .tex\n")
        sys.exit(0)

    safe_file_path = os.path.join(pwd, filename)
    custom_args[-1] = safe_file_path
    
    if DEBUG:
        logger.debug(f"Custom Args: {custom_args}")

    # TODO: can this be more restricted? 
    # mounts tmp und dev for biblatex and other packages needed...
    apptainer_command = [
        "apptainer", "exec",
        "--cleanenv",
        "--no-mount", "sys,tmp",
        "--no-home",
        "--no-privs",
        "--writable-tmpfs",
#        "--contain", TODO: more secure with that options, but shell-escapes won't work
        "--bind", f"{pwd}:{pwd}", # TODO: same bind needed, because synctex.gz is using old pwd... are there more things that have pwd builtin from previous command?
        "/apptainer/latexmk-isolated.sif"
    ] + custom_args

    if DEBUG:
        logger.debug("Apptainer command: " + " ".join(apptainer_command))
        logger.debug(f"Contents of {pwd}: {os.listdir(pwd)}")

    try:
        result = subprocess.run(apptainer_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    except Exception as e:
        logger.error(f"Something went wrong on running {apptainer_command}: {e}")
        sys.exit(0)

    if DEBUG:
        logger.debug(f"{result.stdout}")
    with open(auxdir + "/output.log", "a") as f:
        f.write(result.stdout)
    
    if result and result.returncode != 0:
        logger.error(f"{result.stderr}")
        logger.error(f"{result.returncode}")
        with open(auxdir + "/output.log", "a") as f:
            f.write(result.stderr)

    sys.exit(0)


if __name__ == "__main__":
    main(sys.argv)